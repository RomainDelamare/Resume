@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;

<div class="component-resume-aboutme">
    <div class="about-picture">
        <div class="picture">
            <img src="images/avatar.jpg" alt="avatar" />
        </div>
    </div>
    <div class="about-details">
        <div class="item-with-icon item">
            <i class="material-icons-outlined md-18">
                place
            </i>
            <span>@Location</span>
        </div>
        <div class="item-with-icon item">
            <i class="material-icons-outlined md-18">
                cake
            </i>
            <span>@GetAge(Birthday) @Translation.YEARS</span>
        </div>
        <div class="socials item">
            @foreach (var contact in Contacts)
            {
                <IconButton Icon="@contact.Icon" Title="@contact.Label"
                            OnClick="(() => NavigateTo(contact.Link))">
                </IconButton>
            }
        </div>
        <div class="download item">
            <Button Label="@Translation.DOWNLOAD_RESUME" Icon="cloud_download"
                    OnClick="DownloadResume">
            </Button>
        </div>
    </div>
    <div class="about-text">
        @About
    </div>
</div>

@code {
    [Parameter]
    public string Picture { get; set; }
    [Parameter]
    public string Location { get; set; }
    [Parameter]
    public DateTime Birthday { get; set; }
    [Parameter]
    public string About { get; set; }
    [Parameter]
    public ContactViewModel[] Contacts { get; set; }
    [Parameter]
    public Translation Translation { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("IntersectionObserver.initIntersectionObserver");
        }
    }

    void NavigateTo(string url)
    {
        NavigationManager.NavigateTo(url);
    }

    void DownloadResume()
    {

    }

    int GetAge(DateTime birthdate)
    {
        var today = DateTime.Today;
        var age = today.Year - birthdate.Year;
        if (birthdate.Date > today.AddYears(-age)) age--;
        return age;
    }
}
